UTR no of my transaction is SBIAB12345678901.I would like to recall the transaction. 
I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). 
I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). SBIAB12345678901 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
I want to know the status of my inward transaction SBIIN01234567890
I want to know the status of my outward transaction SBIIN01234567890
I want to recall my transaction SBIIN01234567890
I made an erroneous transaction SBIIN01234567890
I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). 
I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no:SBIIN12345678901 
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
My UTR no is SBINP01234567890. I would like to know the status of my transaction. 
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hello Sir, Amount of Rs.XXXX debited from my account but not credited to the beneficiary's account .What should be done? UTR no for the transaction is XXXXX01234567891 Regards, Mr. XYZ.
I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). SBINA12345678901
I want to know the status of my outward transaction SBIIN01234567890
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
I want to know the status of my outward transaction SBIIN01234567890
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
I want to know the status of my outward transaction SBIIN01234567890
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
fraud
fraud SBIIN01234567890
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
fraud transaction SBIIN01234567890
wrong amount SBIIN01234567890
wrong account SBIIN01234567890
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
this is a case of fraud transaction SBIIN01234567890
SBIIN01234567890 the customer has made a complaint of fraudulent transaction 
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
SBIIN01234567890 the customer has made a complaint of fraudulent transaction 
Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
John
John
Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

Hi Intkhab





I want to know the status of my outward transaction SBIIN01234567890.








Thanks & Regards 
Gowthami R
Tata Consultancy Services Limited​

PFA the key file. It is a 16 bytes key.


You'll have to encode the stringified json in base64 format and then encrypt it using AES 128.


We have made use of crypto library for aes encryption. (the mode is AES.MODE_ECB)


Note that the entire json body will have to be encoded.
The response will be sent by the server in the similar way. So first you'll have to decrypt it and then decode the base64 value.

Regards
Anson Bastos
Tata Consultancy Services Limited
Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com> 
Website: http://www.tcs.com
____________________________________________
Experience certainty. IT Services
Business Solutions
Consulting
____________________________________________

Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Our Fifth 'Documentation Move' this Navratri   If you are unable to click the link in the image, go to: https://knome.ultimatix.net/blogposts/382900 <https://knome.ultimatix.net/blogposts/382900> to read the article
encoded string encryption in python ---------------------------- >>> e=aes.encrypt("hello 1\x05\x05\x05\x05\x05\x05\x05\x05\x05") >>> encoded=base64.b64encode(e) >>> encoded b'xpZVCOS/NXEFZ0Sxt73aTQ=='     String to decrypt: xpZVCOS/NXEFZ0Sxt73aTQ==    Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Re: request json {"message":" Hi Intkhab I want to know the status of my outward transaction SBIIN01234567890.​ Thanks & Regards Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com <mailto:gowthami.r5@tcs.com> ", "sub":"Subject"}     Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----Anson Bastos/TVM/TCS wrote: ----- To: intkhab.shaikh@tcsexch.com <mailto:intkhab.shaikh@tcsexch.com>  From: Anson Bastos/TVM/TCS Date: 09/27/2017 12:55PM Subject: aes c# code   /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "UFKGn/oJoKn5taW++W+ZHQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext    string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////      Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
encoded string encryption in python ---------------------------- >>> e=aes.encrypt("hello 1\x05\x05\x05\x05\x05\x05\x05\x05\x05") >>> encoded=base64.b64encode(e) >>> encoded b'xpZVCOS/NXEFZ0Sxt73aTQ=='     String to decrypt: xpZVCOS/NXEFZ0Sxt73aTQ==    Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
encoded string encryption in python ---------------------------- >>> e=aes.encrypt("hello 1\x05\x05\x05\x05\x05\x05\x05\x05\x05") >>> encoded=base64.b64encode(e) >>> encoded b'xpZVCOS/NXEFZ0Sxt73aTQ=='     String to decrypt: xpZVCOS/NXEFZ0Sxt73aTQ==    Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
encoded string encryption in python ---------------------------- >>> e=aes.encrypt("hello 1\x05\x05\x05\x05\x05\x05\x05\x05\x05") >>> encoded=base64.b64encode(e) >>> encoded b'xpZVCOS/NXEFZ0Sxt73aTQ=='     String to decrypt: xpZVCOS/NXEFZ0Sxt73aTQ==    Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,   I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,   I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,   I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,   I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,   I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Your Ticket Number # 16996378 is in Pending with status Request Submitted is under Process/Work in Progress Ticket Details Employee Name and ID Ticket No Problem Type Description Logged Date Intkhab Shaikh 1127786 16996378  	Software  Reinstallation of MS-SQL Management Studio for the CR #6931836. Kindly re-install the SQL Management Studio 2012 on the asset ID #01HW574297  28/09/2017 12:32:02 Please Update the ticket with required information .	 Take Action   	 		 		 Comment: 	 	 	 	 Attachment:		 	   	 	 			 (Note: Incase you have multiple attacment , zip the attachments and upload)	 			 			 Please note:   The ‘Confirm Closure’ or ‘Update Ticket’ facility is only supported by Lotus Notes. Other email clients will not display the 'Confirm Closure’ or ‘Update Ticket’ button. Thus, to act on request, please click here <https://tcs-helpdesk.ultimatix.net/pilotglobalhelpdesk/TicketMgmt/wfHistory.aspx?Ticket=abo1n022Etv70ETbixHYE2mt3vM9CscUWp3U4qtl1QQ=> , or log on to Ultimatix > Employee Services > Helpdesk > TCS Global Helpdesk > Ultimatix Services / CR Tool > Launch > Check Ticket Status > History and click on Ticket number.    Note: Any action taken would take a maximum of 30 minutes to update into the Global Helpdesk System. Any action taken in Global Helpdesk system within these 30 minutes would override the action taken via the email.  Please write to Global.Helpdesk@Tcs.Com for any queries.  Regards, Help-Desk
Fw: Required softwares for SSIS FYI   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com    -----Forwarded by Pranali Shirude/MUM/TCS on 09/27/2017 05:24PM -----   =======================  To: Pranali Shirude <pranali.shirude@tcs.com>  From: C Ar <c.ar@tcs.com>  Date: 09/27/2017 05:23PM   Cc: Rajiv Khanna <rajiv.khanna@tcs.com>, Patel Kirtikumar <patel.kirtikumar@tcs.com>, Atul Kurne <atul.kurne@tcs.com>  Subject: Required softwares for SSIS  =======================  Dear Pranali,   Please download the following softwares for SSIS installation.   1.Visual studio 2015  2.SQL Server Data Tool  3.SQL Server Management Studio  4.SQLlocalDB  5.Power BI    Thanks & regards  Arunoday Chorage
Fw: Required softwares for SSIS FYI   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com    -----Forwarded by Pranali Shirude/MUM/TCS on 09/27/2017 05:24PM -----   =======================  To: Pranali Shirude <pranali.shirude@tcs.com>  From: C Ar <c.ar@tcs.com>  Date: 09/27/2017 05:23PM   Cc: Rajiv Khanna <rajiv.khanna@tcs.com>, Patel Kirtikumar <patel.kirtikumar@tcs.com>, Atul Kurne <atul.kurne@tcs.com>  Subject: Required softwares for SSIS  =======================  Dear Pranali,   Please download the following softwares for SSIS installation.   1.Visual studio 2015  2.SQL Server Data Tool  3.SQL Server Management Studio  4.SQLlocalDB  5.Power BI    Thanks & regards  Arunoday Chorage
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
When Hindi Met English - Fun Fan Contest Winners 
Timesheet Compliance Status as of 27-Sep-2017 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Re: aes c# code /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "xpZVCOS/NXEFZ0Sxt73aTQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext  string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////   Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----Anson Bastos/TVM/TCS wrote: ----- To: intkhab.shaikh@tcsexch.com <mailto:intkhab.shaikh@tcsexch.com>  From: Anson Bastos/TVM/TCS Date: 09/27/2017 12:55PM Subject: aes c# code   /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "UFKGn/oJoKn5taW++W+ZHQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext    string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////      Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
encoded string encryption in python ---------------------------- >>> e=aes.encrypt("hello 1\x05\x05\x05\x05\x05\x05\x05\x05\x05") >>> encoded=base64.b64encode(e) >>> encoded b'xpZVCOS/NXEFZ0Sxt73aTQ=='     String to decrypt: xpZVCOS/NXEFZ0Sxt73aTQ==    Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
aes c# code /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "UFKGn/oJoKn5taW++W+ZHQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext    string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////      Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
Re: Test Mailhanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com>    -----Intkhab Shaikh <intkhab.shaikh@tcs.com <mailto:intkhab.shaikh@tcs.com> > wrote: ----- To: Pranali Shirude <pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> > From: Intkhab Shaikh <intkhab.shaikh@tcs.com <mailto:intkhab.shaikh@tcs.com> > Date: 09/29/2017 02:59PM Subject: Test Mail       What is Lorem Ipsum?   Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.   Why do we use it?   It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).      Where does it come from?   Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.  The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.   Where can I get some?   There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.  ​	 ​​ 	        Thanks & Regards  Intkhab Shaikh Tata Consultancy Services Limited Associate ID : #1127786 Mobile : +91-8108965264 Mailto : intkhab.shaikh@tcs.com <http://mail.tcs.com> 
Re: aes c# code /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "xpZVCOS/NXEFZ0Sxt73aTQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext  string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////   Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----Anson Bastos/TVM/TCS wrote: ----- To: intkhab.shaikh@tcsexch.com <mailto:intkhab.shaikh@tcsexch.com>  From: Anson Bastos/TVM/TCS Date: 09/27/2017 12:55PM Subject: aes c# code   /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "UFKGn/oJoKn5taW++W+ZHQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext    string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////      Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
Re: aes c# code /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "xpZVCOS/NXEFZ0Sxt73aTQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext  string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////   Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----Anson Bastos/TVM/TCS wrote: ----- To: intkhab.shaikh@tcsexch.com <mailto:intkhab.shaikh@tcsexch.com>  From: Anson Bastos/TVM/TCS Date: 09/27/2017 12:55PM Subject: aes c# code   /////////////////////////////////////////////////////////////////////////////// // SAMPLE: Symmetric key encryption and decryption using Rijndael algorithm. //  // To run this sample, create a new Visual C# project using the Console // Application template and replace the contents of the Class1.cs file with // the code below. // // THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  // EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  // WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. //  // Copyright (C) 2002-2013 Obviex(TM). All rights reserved. //  using System; using System.IO; using System.Text; using System.Security.Cryptography;   /// <summary> /// This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and  /// decrypt data. As long as encryption and decryption routines use the same /// parameters to generate the keys, the keys are guaranteed to be the same. /// The class uses static functions with duplicate code to make it easier to /// demonstrate encryption and decryption logic. In a real-life application,  /// this may not be the most efficient way of handling encryption, so - as /// soon as you feel comfortable with it - you may want to redesign this class. /// </summary> public class RijndaelSimple {  /// <summary>  /// Encrypts specified plaintext using Rijndael symmetric key algorithm  /// and returns a base64-encoded result.  /// </summary>  /// <param name="plainText">  /// Plaintext value to be encrypted.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be   /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.   /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Encrypted value formatted as a base64-encoded string.  /// </returns>  public static string Encrypt  (  string plainText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings into byte arrays.  // Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8   // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our plaintext into a byte array.  // Let us assume that plaintext contains UTF8-encoded characters.  byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);    // First, we must create a password, from which the key will be derived.  // This password will be generated from the specified passphrase and   // salt value. The password will be created using the specified hash   // algorithm. Password creation can be done in several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");  Console.WriteLine(Encoding.UTF8.GetString(keyBytes));  // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate encryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform encryptor = symmetricKey.CreateEncryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream();    // Define cryptographic stream (always use Write mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  encryptor,  CryptoStreamMode.Write  );    // Start encrypting.  Console.WriteLine(plainTextBytes.Length);  cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);    // Finish encrypting.  cryptoStream.FlushFinalBlock();    // Convert our encrypted data from a memory stream into a byte array.  byte[] cipherTextBytes = memoryStream.ToArray();    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert encrypted data into a base64-encoded string.  string cipherText = Convert.ToBase64String(cipherTextBytes);    // Return encrypted string.  return cipherText;  }    /// <summary>  /// Decrypts specified ciphertext using Rijndael symmetric key algorithm.  /// </summary>  /// <param name="cipherText">  /// Base64-formatted ciphertext value.  /// </param>  /// <param name="passPhrase">  /// Passphrase from which a pseudo-random password will be derived. The  /// derived password will be used to generate the encryption key.  /// Passphrase can be any string. In this example we assume that this  /// passphrase is an ASCII string.  /// </param>  /// <param name="saltValue">  /// Salt value used along with passphrase to generate password. Salt can  /// be any string. In this example we assume that salt is an ASCII string.  /// </param>  /// <param name="hashAlgorithm">  /// Hash algorithm used to generate password. Allowed values are: "MD5" and  /// "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.  /// </param>  /// <param name="passwordIterations">  /// Number of iterations used to generate password. One or two iterations  /// should be enough.  /// </param>  /// <param name="initVector">  /// Initialization vector (or IV). This value is required to encrypt the  /// first block of plaintext data. For RijndaelManaged class IV must be  /// exactly 16 ASCII characters long.  /// </param>  /// <param name="keySize">  /// Size of encryption key in bits. Allowed values are: 128, 192, and 256.  /// Longer keys are more secure than shorter keys.  /// </param>  /// <returns>  /// Decrypted string value.  /// </returns>  /// <remarks>  /// Most of the logic in this function is similar to the Encrypt  /// logic. In order for decryption to work, all parameters of this function  /// - except cipherText value - must match the corresponding parameters of  /// the Encrypt function which was called to generate the  /// ciphertext.  /// </remarks>  public static string Decrypt  (  string cipherText,  string passPhrase,  string saltValue,  string hashAlgorithm,  int passwordIterations,  string initVector,  int keySize  )  {  // Convert strings defining encryption key characteristics into byte  // arrays. Let us assume that strings only contain ASCII codes.  // If strings include Unicode characters, use Unicode, UTF7, or UTF8  // encoding.  byte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);  byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);    // Convert our ciphertext into a byte array.  string hardcodedcipher = "UFKGn/oJoKn5taW++W+ZHQ==";  byte[] cipherTextBytes = Convert.FromBase64String(hardcodedcipher);    // First, we must create a password, from which the key will be   // derived. This password will be generated from the specified   // passphrase and salt value. The password will be created using  // the specified hash algorithm. Password creation can be done in  // several iterations.  PasswordDeriveBytes password = new PasswordDeriveBytes  (  passPhrase,  saltValueBytes,  hashAlgorithm,  passwordIterations  );    // Use the password to generate pseudo-random bytes for the encryption  // key. Specify the size of the key in bytes (instead of bits).  //byte[] keyBytes = password.GetBytes(keySize / 8);  byte[] keyBytes = Encoding.ASCII.GetBytes("1234567812345678");    // Create uninitialized Rijndael encryption object.  RijndaelManaged symmetricKey = new RijndaelManaged();    // It is reasonable to set encryption mode to Cipher Block Chaining  // (CBC). Use default options for other symmetric key parameters.  symmetricKey.Mode = CipherMode.ECB;    // Generate decryptor from the existing key bytes and initialization   // vector. Key size will be defined based on the number of the key   // bytes.  ICryptoTransform decryptor = symmetricKey.CreateDecryptor  (  keyBytes,  initVectorBytes  );    // Define memory stream which will be used to hold encrypted data.  MemoryStream memoryStream = new MemoryStream(cipherTextBytes);    // Define cryptographic stream (always use Read mode for encryption).  CryptoStream cryptoStream = new CryptoStream  (  memoryStream,  decryptor,  CryptoStreamMode.Read  );    // Since at this point we don't know what the size of decrypted data  // will be, allocate the buffer long enough to hold ciphertext;  // plaintext is never longer than ciphertext.  byte[] plainTextBytes = new byte[cipherTextBytes.Length];  //byte[] plainTextBytes = new byte[cipherTextBytes.Length];    // Start decrypting.  int decryptedByteCount = cryptoStream.Read  (  plainTextBytes,  0,  plainTextBytes.Length  );    // Close both streams.  memoryStream.Close();  cryptoStream.Close();    // Convert decrypted data into a string.   // Let us assume that the original plaintext string was UTF8-encoded.  string plainText = Encoding.UTF8.GetString  (  plainTextBytes,  0,  decryptedByteCount  );    // Return decrypted string.   return plainText;  } }   /// <summary> /// Illustrates the use of RijndaelSimple class to encrypt and decrypt data. /// </summary> public class RijndaelSimpleTest {  /// <summary>  /// The main entry point for the application.  /// </summary>  [STAThread]  static void Main(string[] args)  {  string plainText = "hello world"; // original plaintext    string passPhrase = "Pas5pr@se"; // can be any string  string saltValue = "s@1tValue"; // can be any string  string hashAlgorithm = "SHA1"; // can be "MD5"  int passwordIterations= 2; // can be any number  string initVector = "@1B2c3D4e5F6g7H8"; // must be 16 bytes  int keySize = 128; // can be 192 or 128    Console.WriteLine(String.Format("Plaintext : {0}", plainText));    string cipherText = RijndaelSimple.Encrypt  (  plainText,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Encrypted : {0}", cipherText));    string b64txtToDecrypt = "UFKGn/oJoKn5taW++W+ZHQ==";  plainText = RijndaelSimple.Decrypt  (  b64txtToDecrypt,  passPhrase,  saltValue,  hashAlgorithm,  passwordIterations,  initVector,  keySize  );    Console.WriteLine(String.Format("Decrypted : {0}", plainText));  } } // // END OF FILE ///////////////////////////////////////////////////////////////////////////////      Regards Anson Bastos Tata Consultancy Services Limited Mailto: anson.bastos@tcs.com <mailto:anson.bastos@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________ 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
No UTR no This is Vinay Pratap Singh staying in Coimbatore,Tamilnadu. By Mistake i did  one NEFT transaction of 50000 RS. from SBI account no. 00000030230504321 to  ICICI account 237201500027 on 12th Feb-2014.I want to rollback this transaction  from the ICICI account 237201500027 to the ICICI Account 237201500067 which is  in name of Savitri Singh.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Smart Mail Demo Subject    Hi Intkhab      I want to know the status of my outward transaction SBIIN01234567890.​      Thanks & Regards  Gowthami R Tata Consultancy Services Limited Mobile : +91-8553733385 Mailto : gowthami.r5@tcs.com 
Recall transaction: Outward Hi,  I made online transaction to transfer Rs 15000 to my friend's A/C but I  mistakenly transferred to wrong A/C on date 04/02/2012 with transaction  reference number: 289603120.Actually I had to transfer to Bank of India A/C  no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no.  849210310000103 (Priya). UTR no: SBINP01234567891    Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Your Ticket Number 16996378 is Auto Hard closed Dear Associate,  Your Ticket has been Auto Hard Closed.  Ticket Number : 16996378  ================================================== Problem Description : Reinstallation of MS-SQL Management Studio for the CR #6931836. Kindly re-install the SQL Management Studio 2012 on the asset ID #01HW574297  ==================================================  Please visit Global-HelpDesk for more details. Ultimatix-- My Applications-- Employee Services-- Helpdesk-- TCS Global Helpdesk-- IT Services and Others-- Launch-- Check Ticket Status-- History-- Click on Ticket Number.  Regards, Help-Desk Email:global.helpdesk@tcs.com  This is a System generated mail, please do not reply. 
Your Ticket Number 16996378 is Auto Hard closed Dear Associate,  Your Ticket has been Auto Hard Closed.  Ticket Number : 16996378  ================================================== Problem Description : Reinstallation of MS-SQL Management Studio for the CR #6931836. Kindly re-install the SQL Management Studio 2012 on the asset ID #01HW574297  ==================================================  Please visit Global-HelpDesk for more details. Ultimatix-- My Applications-- Employee Services-- Helpdesk-- TCS Global Helpdesk-- IT Services and Others-- Launch-- Check Ticket Status-- History-- Click on Ticket Number.  Regards, Help-Desk Email:global.helpdesk@tcs.com  This is a System generated mail, please do not reply. 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you  to kindly return the transaction to originator ac. Inconvenience caused  is highly regretted.Transaction ref no SBIAB12345678901 We request you mark  lien on the account and confirm us whether funds are available in the account  or not. Kindly confirm the reversal ref no of  the transaction.     Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com <mailto:pranali.shirude@tcs.com> 
Transaction Status :Outward My UTR no is SBINP01234567890. I would like to know the status of my   transaction.   Thanks And Regards, Pranali Shirude System Engineer Tata Consultancy Services Gateway Park, Andheri-Mumbai Mailto:pranali.shirude@tcs.com
Check-ins Dear Mr. INTKHAB SHAIKH, [E/1127786]  The following document/s have been returned by you:    Road Less Travelled : A New Psychology of Love, Traditional Values and Spiritual Growth / Peck, M. Scott [MU057274], EMPLAZA    This is an auto-generated mail. Kindly do not reply. Contact your local IRC for any help.   Thank you for visiting IRC Mumbai With Best Regards IRC Team
Re: Fw: Treasury Reporting Architecture Dear Girish,  Thanks for sharing the Info for Ports..Would request you to kindly also provide following details :   *	TCS team contact who are working on MS BI tool *	Compatibility of DB server as Linux with Oracle and MS BI tools 	 *	Any other supporting package or tools needs to install along with SSIS,SSAS (which we ask bank for same)   Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----Girish Phadke/MUM/TCS wrote: ----- To: Rajiv Khanna/MUM/TCS@TCS From: Girish Phadke/MUM/TCS Date: 10/06/2017 05:21PM Cc: Atul Kurne/MUM/TCS@TCS, c.ar@tcsexch.com <mailto:c.ar@tcsexch.com> , Indira G/AHD/TCS@TCS, Krishnan Iyer/MUM/TCS@TCS, Patel Kirtikumar/MUM/TCS@TCS, Pranali Shirude/MUM/TCS@TCS, Pranita Jagdale/MUM/TCS@TCS Subject: Re: Fw: Treasury Reporting Architecture  Hi Rajiv,  This list does not seem to include the ports that SQL Server uses. Below are the ports that SQL Server uses:   1) SQL Server: TCP 1433, TCP 1434, UDP 1434 2) SSIS: TCP 135 3) SSAS: TCP 2383, TCP 2382 4) SSRS: TCP 80, TCP 443    Thanks, GIRISH PHADKE Tata Consultancy Services Mailto: girish.phadke@tcs.com <mailto:girish.phadke@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________   Rajiv Khanna---10/06/2017 04:20:00 PM---Dear Girish, Would like to share following Ports and Software packages which we have identified on t  From: Rajiv Khanna/MUM/TCS To: Girish Phadke/MUM/TCS@TCS Cc: Atul Kurne/MUM/TCS@TCS, Krishnan Iyer/MUM/TCS@TCS, Patel Kirtikumar/MUM/TCS@TCS, Pranali Shirude/MUM/TCS@TCS, Pranita Jagdale/MUM/TCS@TCS, Indira G/AHD/TCS@TCS, c.ar@tcsexch.com <mailto:c.ar@tcsexch.com>  Date: 10/06/2017 04:20 PM Subject: Re: Fw: Treasury Reporting Architecture  ________________________________     Dear Girish,  Would like to share following Ports and Software packages which we have identified on the basis of Information shared in thread mail ..  Pls let us know which additional ports are required :    	Source and Destinations  	Ports   	Reasons  	Application installed  	Server details  	Server 1(as destination)  2201,2202,3389	For FTPS and remote server	Server 1-SSMS,SSIS	Windows	  	Server 1 and Server 2  1521,1522,3389	For database access and remote server	Server 2-Datamart	Linux	  	Server 2 and Server 3  1521,1522,3389	For database access and remote server​	Server3-SSRS	Windows	  Following is the applications requirement which we are sharing to Bank:  Software Requirements:  1) SQL server 2014 2) SQL server management studio 2014 3) SQL server data tools 2015 (containing SSIS ,SSRS and SSAS)  Other Requirements:  Internet connection   Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://www.tcs.com <http://www.tcs.com/>  ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________   -----Rajiv Khanna/MUM/TCS wrote: ----- To: Girish Phadke/MUM/TCS@TCS From: Rajiv Khanna/MUM/TCS Date: 10/06/2017 03:27PM Cc: Atul Kurne/MUM/TCS@TCS, Krishnan Iyer/MUM/TCS@TCS, Patel Kirtikumar/MUM/TCS@TCS, Pranali Shirude/MUM/TCS@TCS, Pranita Jagdale/MUM/TCS@TCS, Indira G/AHD/TCS@TCS, c.ar@tcs.com <mailto:c.ar@tcs.com>  Subject: Re: Fw: Treasury Reporting Architecture  Dear Girish  We had proposed architecture 3 tier architecture to bank   1) Window Server for Landing with SSMS & SSIS  2) Linux Server with Oracle DB for Mart , Stage data & other data  3) Windows server with AS & RS   We required your assistance/ guidance for the following :  *	Bank wants to know which port needs to open between this 3 servers i.e. one where data from all sources is landing hosting (SSMS and SSIS),second -containing Datamart and 3rd containing SSRS *	Compatibility of DB server as Linux with Oracle and MS BI tools *	Any other supporting package or tools needs to install along with SSIS,SSAS (which we ask bank for same) *	TCS team contact who are working on MS BI tool     For your reference following is the architecture diagram :   Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://www.tcs.com <http://www.tcs.com/>  ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________   Rajiv Khanna---10/05/2017 03:57:26 PM---Dear Indira, We have come up with 3 tier architecture..for the IFM project .  From: Rajiv Khanna/MUM/TCS To: Indira G/AHD/TCS@TCS Cc: Patel Kirtikumar/MUM/TCS@TCS, Atul Kurne/MUM/TCS@TCS, Pranali Shirude/MUM/TCS@TCS, Krishnan Iyer/MUM/TCS@TCS, Pranita Jagdale/MUM/TCS@TCS, Girish Phadke/MUM/TCS@TCS Date: 10/05/2017 03:57 PM Subject: Fw: Treasury Reporting Architecture  ________________________________    Dear Indira,  We have come up with 3 tier architecture..for the IFM project .  Pls suggest if same in order for suggested project implementation..so that we can refer same to bank..   Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://www.tcs.com <http://www.tcs.com/>  ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________  ----- Forwarded by Rajiv Khanna/MUM/TCS on 10/05/2017 03:49 PM -----  From: Atul Kurne/MUM/TCS To: Rajiv Khanna/MUM/TCS@TCS Cc: Patel Kirtikumar/MUM/TCS@TCS Date: 10/04/2017 11:50 PM Subject: Treasury Reporting Architecture  ________________________________     Dear Sir,  As discussed, please find the attached architecture for Treasury Reporting. Kindly review it.   Thanks & Regards  Atul Kurne  Tata Consultancy Services  Cell Number: 8286235329  Mail to: atul.kurne@tcs.com <mailto:atul.kurne@tcs.com> | Web Site: www.tcs.com <https://mail.tcs.com/owa/redir.aspx?C=VNgu3EE_GXEs_ecThq1psOT2HRVR9kMeLeM0cLRLCnULujTdglHUCA..&URL=http%3a%2f%2fwww.tcs.com%2f>  ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________[attachment "Solution Architecture – Treasury Reporting v1.1.pptx" deleted by Rajiv Khanna/MUM/TCS] 
Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365) Dear Radhesh sir,  We are working on MS-Outlook thick client platform .   Trying to close the Tab issue soon, Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://www.tcs.com ____________________________________________ Experience certainty. IT Services Business Solutions Consulting ____________________________________________    -----RADHESH HEGDE <radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> > wrote: ----- To: Rajiv Khanna <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> > From: RADHESH HEGDE <radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> > Date: 10/07/2017 01:34PM Cc: CIC Team <cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> >, HEAD SBICIC <head.sbicic@sbi.co.in <mailto:head.sbicic@sbi.co.in> >, krishnan.iyer_tcs.com <krishnan.iyer@tcs.com <mailto:krishnan.iyer@tcs.com> >, "intkhab.shaikh@tcs.com <mailto:intkhab.shaikh@tcs.com> " <intkhab.shaikh@tcs.com <mailto:intkhab.shaikh@tcs.com> > Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)   ________________________________   WARNING: Your email security system has determined the message below may be a potential threat.  It may pose as a legitimate company, tricking victims into revealing personal information.  If you do not know the sender or cannot verify the integrity of the message, please do not respond or click on links in the message. Depending on the security settings, clickable URLs may have been modified to provide additional security.  ________________________________   Rajiv Ji,     Please advise which platform are you working on to integrate the plugin as we need to request the concerned department for the required licenses.     Let us know how much time will be needed to complete the required plugin testing ??     With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134   ________________________________  From: Rajiv Khanna <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> > Sent: 06 October 2017 15:34:50 To: RADHESH HEGDE Cc: CIC Team; HEAD SBICIC; krishnan.iyer_tcs.com; intkhab.shaikh@tcs.com <mailto:intkhab.shaikh@tcs.com>  Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)    Dear Radhesh sir,   As already shared we are ready with Required plug-in but currently working on deployment for same,   Would update you on same,   Thanks & Regards Rajiv Khanna Tata Consultancy Services State Bank Of India Corporate Center, New Administration Building,Sector 11, CBD Belapur, Navi Mumbai Mumbai - 400 614,Maharastra India Cell:- 9987198932 Mailto: rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com>  Website: http://secure-web.cisco.com/1CwJkxVJmb9YHuRsK1mcDUNZH2KU3xkySI5KXxs_U53WpsejcOZLgIOMlVwj5-kGnBzW5ajKm24H3DTyOxW2DAFNebFXY9_vA7r8uBjtpAYU3Hw2OSghL6QSUcxn6tHq4JWdlmWpXKp-LZl5BMCDE890ZyJHr_8mnrDlWl5BntS3oyoBPr9Gt3XlG7TueJfwThjI03AwLSsszXxpR-mwY9a_YFSzdby-FcMSESQQxyepyECBB_YozHKJPR5oGtMd0/http%3A%2F%2Fwww.tcs.com <http://secure-web.cisco.com/1ELoBLOprHtnbXocK4FDWJob2cSPs4ERfFBTTh4sEDTjRznph7jm0ATwmiwBhR4h-K5s3cDI8D25_ub-cbFnvLc50ngrdR9Mkks79KEV8f7LMUv4oF0aX7FBs1dO2RDHOZ7TFQoUySI_cBM6qxb-_csmu-Rvkdc3fqUHbnAtEjn2oKCOHQw9E7V7udluxUKsRSKBkzdAGNXKUjXe4jvo_-qXOdKUw_AdXjG_Ns62VVKNmsoDweEoP4-YLGCisaCbZ/http%3A%2F%2Fwww.tcs.com%2F>  ____________________________________________ Experience certainty. IT Services  Business Solutions  Consulting ____________________________________________     From: RADHESH HEGDE <radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> >  To: 'Rajiv Khanna' <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> >  Cc: CIC Team <cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> >, HEAD SBICIC <head.sbicic@sbi.co.in <mailto:head.sbicic@sbi.co.in> >, krishnan.iyer_tcs.com <krishnan.iyer@tcs.com <mailto:krishnan.iyer@tcs.com> >  Date: 10/03/2017 06:22 PM  Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)   ________________________________     ________________________________   WARNING: Your email security system has determined the message below may be a potential threat.  It may pose as a legitimate company, tricking victims into revealing personal information.  If you do not know the sender or cannot verify the integrity of the message, please do not respond or click on links in the message. Depending on the security settings, clickable URLs may have been modified to provide additional security.   ________________________________   Rajiv Ji,   Waiting for your updates on the smart response plugin.   With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134       ________________________________   From: RADHESH HEGDE Sent: 03 October 2017 12:27 To: 'Rajiv Khanna' Cc: CIC Team; HEAD SBICIC; krishnan.iyer_tcs.com Subject: Fw: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)      Rajiv Ji,   Please find below the updates of Microsoft about the inability in integrating the server side plugin for smart response.   Please provide the current status of the TCS regarding the client side plugin as confirmed from you over phone.   With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134         ________________________________   From: Dheevar Paralkar <dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> > Sent: 03 October 2017 12:20 To: RADHESH HEGDE; Arjun Pengat Cc: CIC Team; RAMAN PATHREY; PANKAJ GEDAM; 'Rajiv Khanna'; HEAD SBICIC Subject: RE: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)    Hi Radhesh,    O365 is a multi-tenant environment and therefore we will not be able to deploy any server side component the way you have currently done it with your EMS setup. A client side Office Add-in will have to be built to achieve the required.     *	Office Add-ins platform overview - https://secure-web.cisco.com/1TlmtKGQSHDB7_VB_DOhw-n7zp3uoX1Moy46W7wJ2OgfNlxxcbq_Oj4mtez27bH8yIJziaNMIvQ3phdEZKtGorL37UHonl_8MwcSCEoMElxWRxZUtK81Hc5DMWv2rLEmOUjY-kaVrauL2hMAxjyVp_vuf2QbQLfS-_lrpMbfqgICxatAomn4VikG91hEhdib7xugQf1aE5IHYkct9-fE-E4sRSGde3NUV8mKt8vA0zC9WeswzAhSQ7fRvb_Wpf-VL/https%3A%2F%2Fdev.office.com%2Fdocs%2Fadd-ins%2Foverview%2Foffice-add-ins <https://secure-web.cisco.com/1TlmtKGQSHDB7_VB_DOhw-n7zp3uoX1Moy46W7wJ2OgfNlxxcbq_Oj4mtez27bH8yIJziaNMIvQ3phdEZKtGorL37UHonl_8MwcSCEoMElxWRxZUtK81Hc5DMWv2rLEmOUjY-kaVrauL2hMAxjyVp_vuf2QbQLfS-_lrpMbfqgICxatAomn4VikG91hEhdib7xugQf1aE5IHYkct9-fE-E4sRSGde3NUV8mKt8vA0zC9WeswzAhSQ7fRvb_Wpf-VL/https%3A%2F%2Fdev.office.com%2Fdocs%2Fadd-ins%2Foverview%2Foffice-add-ins>  *	Outlook add-ins overview - https://secure-web.cisco.com/1KiqXixNTj_gUIgvru-fFUsCNLznc4AyjY4mrb7gB73z0pr6o_AnrOaTUxQVpuQ9y6g27UGwJ7fZWUBa8UTEqa63rzSXEZAKBFbJPCvIW6qPJtIACpWRB3SVn8p_xgGXHlQ0VbIiWPTW_T4qkol53KdrGz756xGQjtdN0l7PRmAW4V4p1LfqM3bUDC6M4LMTAg0KOL4Pf_wdf5bDT-9mjbSLrByyiQ0FRyvq88i9zTDkVGKwWq4xBRSbJdImKZwcK/https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Foutlook%2Fadd-ins%2F <https://secure-web.cisco.com/1KiqXixNTj_gUIgvru-fFUsCNLznc4AyjY4mrb7gB73z0pr6o_AnrOaTUxQVpuQ9y6g27UGwJ7fZWUBa8UTEqa63rzSXEZAKBFbJPCvIW6qPJtIACpWRB3SVn8p_xgGXHlQ0VbIiWPTW_T4qkol53KdrGz756xGQjtdN0l7PRmAW4V4p1LfqM3bUDC6M4LMTAg0KOL4Pf_wdf5bDT-9mjbSLrByyiQ0FRyvq88i9zTDkVGKwWq4xBRSbJdImKZwcK/https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Foutlook%2Fadd-ins%2F>     Hi Arjun, please add to the above if I have missed out on anything.    Regards,    Dheevar Paralkar.  +919820139172    From: RADHESH HEGDE [mailto:radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> ]  Sent: Tuesday, October 3, 2017 11:23 AM To: Dheevar Paralkar <dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> >; Arjun Pengat <arjunpe@microsoft.com <mailto:arjunpe@microsoft.com> > Cc: CIC Team <cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> >; RAMAN PATHREY <raman.pathrey@sbi.co.in <mailto:raman.pathrey@sbi.co.in> >; PANKAJ GEDAM <pankaj.gedam@sbi.co.in <mailto:pankaj.gedam@sbi.co.in> >; 'Rajiv Khanna' <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> >; HEAD SBICIC <head.sbicic@sbi.co.in <mailto:head.sbicic@sbi.co.in> > Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)      Dear Sir,    Waiting for your response on the below request.    With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134    ________________________________   From: RADHESH HEGDE Sent: 25 September 2017 18:06 To: Dheevar Paralkar; Arjun Pengat Cc: CIC Team; RAMAN PATHREY; PANKAJ GEDAM; 'Rajiv Khanna'; HEAD SBICIC Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)    Dear Team,    As discussed with you on call, we would wait for your response with the next course of action / work around to resolve the issue.    With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134        ________________________________   From: RADHESH HEGDE Sent: 25 September 2017 17:09:15 To: Dheevar Paralkar; Arjun Pengat Cc: CIC Team; RAMAN PATHREY; PANKAJ GEDAM; 'Rajiv Khanna'; HEAD SBICIC; CGMIT TCM Subject: Re: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)      Dear Sir,    Yes please do that.    With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134      ________________________________   From: Dheevar Paralkar <dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> > Sent: 25 September 2017 16:05 To: RADHESH HEGDE; Arjun Pengat Cc: CIC Team; RAMAN PATHREY; PANKAJ GEDAM; 'Rajiv Khanna'; HEAD SBICIC; CGMIT TCM Subject: RE: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365)    Hi Radhesh,    Our team has a few queries on the Smart Email Solution. Do let know if we can have a call today evening around 5:00 to discuss the same.    Regards,    Dheevar Paralkar.  +919820139172    From: Dheevar Paralkar  Sent: Friday, September 22, 2017 3:10 PM To: 'radhesh hegde' <radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> > Cc: cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> ; 'Raman Pathrey' <raman.pathrey@sbi.co.in <mailto:raman.pathrey@sbi.co.in> >; 'PANKAJ GEDAM' <pankaj.gedam@sbi.co.in <mailto:pankaj.gedam@sbi.co.in> >; 'Rajiv Khanna' <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> >; head.sbicic@sbi.co.in <mailto:head.sbicic@sbi.co.in> ; 'CGMIT TCM' <cgmit.tcm@sbi.co.in <mailto:cgmit.tcm@sbi.co.in> > Subject: RE: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365) Importance: High    Hi Radhesh,    We are exploring the possibility of this with our engineering team. As discussed, the O365 services are operated in a multi-tenant environment and gives us limited scope for custom development on the server side as opposed to an on-premise messaging environment.    I shall be able to share the solution options, either using Exchange Online, SharePoint Services, Exchange Web Services etc. in the coming week. I shall share an update by Wednesday.    Regards,    Dheevar Paralkar.  +919820139172    From: radhesh hegde [mailto:radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> ]  Sent: Friday, September 22, 2017 10:49 AM To: Dheevar Paralkar <dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> > Cc: cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> ; 'Raman Pathrey' <raman.pathrey@sbi.co.in <mailto:raman.pathrey@sbi.co.in> >; 'PANKAJ GEDAM' <pankaj.gedam@sbi.co.in <mailto:pankaj.gedam@sbi.co.in> >; 'Rajiv Khanna' <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> >; head.sbicic@sbi.co.in <mailto:head.sbicic@sbi.co.in> ; 'CGMIT TCM' <cgmit.tcm@sbi.co.in <mailto:cgmit.tcm@sbi.co.in> > Subject: Smart Mail Solution deployment stuck, awaiting smart response plugin integration to office 365( email migration to office 365) Importance: High    Dear Sir,    Referring the trailing email, please advise the tentative date for updates from your side on this. As we are on the verge of deployment of Smart Response solution, however the integration of smart response plugin to the Office 365 server / Office 365 client being the crucial decision, we are stuck.    With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134      From: Dheevar Paralkar [mailto:dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> ]  Sent: 20 September 2017 14:19 To: radhesh hegde Cc: cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> ; 'Raman Pathrey'; 'PANKAJ GEDAM'; 'Rajiv Khanna' Subject: RE: FW: Smart Mail Solution    Hi Radhesh,    You will have to give us time to come back on the feasibility of the solution which you are looking for.    Regards,    Dheevar Paralkar.  +919820139172    From: radhesh hegde [mailto:radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> ]  Sent: Wednesday, September 20, 2017 11:10 AM To: Dheevar Paralkar <dheevar.paralkar@microsoft.com <mailto:dheevar.paralkar@microsoft.com> > Cc: cic.team@sbi.co.in <mailto:cic.team@sbi.co.in> ; 'Raman Pathrey' <raman.pathrey@sbi.co.in <mailto:raman.pathrey@sbi.co.in> >; 'PANKAJ GEDAM' <pankaj.gedam@sbi.co.in <mailto:pankaj.gedam@sbi.co.in> >; 'Rajiv Khanna' <rajiv.khanna@tcs.com <mailto:rajiv.khanna@tcs.com> > Subject: FW: FW: Smart Mail Solution    Dear Sir,    Hope this is being discussed internally in Microsoft. Request your attention on this.    With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134      From: radhesh hegde [mailto:radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> ]  Sent: 19 September 2017 14:35 To: 'dheevar.paralkar@microsoft.com' <mailto:'dheevar.paralkar@microsoft.com'>  Cc: 'CIC Team'; 'Raman Pathrey'; 'PANKAJ GEDAM'; 'HEAD SBICIC'; 'Rajiv Khanna' Subject: FW: FW: Smart Mail Solution    Dear Sir,    As discussed with Mr. Raman Ji and you, please find herewith the Smart Response architecture along with the process flow.    This solution was about to be deployed in production , however due to migration of email solution to Office 365 we need your support and also to update Management about the progress of the deployment.    For any further queries in this matter you may contact us.      With Warm Regards    Radhesh Hegde  CIC Team, SBI GITC, Belapur, Navi Mumbai  Mobile No -9413399134      From: radhesh hegde [mailto:radhesh.hegde@sbi.co.in <mailto:radhesh.hegde@sbi.co.in> ]  Sent: 06 July 2017 18:08 To: 'R Kumar' Cc: 'cic.team@sbi.co.in' <mailto:'cic.team@sbi.co.in'> ; 'Rajiv Khanna'; 'vishaklha.kadam@tcs.com' <mailto:'vishaklha.kadam@tcs.com'>  Subject: FW: FW: Smart Mail Solution    Dear Sir,    Please find attached the network diagram(named smart reply architecture) for smart reply.  Warm Regards  Radhesh hegde  CIC-GITC         --- Disclaimer --- The information in this mail is confidential and is intended solely for addressee. Access to this mail by anyone else is unauthorised. Copying or further distribution beyond the original recipient may be unlawful. Any opinion expressed in this mail is that of sender and does not necessarily reflect that of State Bank group.---     --- Disclaimer --- The information in this mail is confidential and is intended solely for addressee. Access to this mail by anyone else is unauthorised. Copying or further distribution beyond the original recipient may be unlawful. Any opinion expressed in this mail is that of sender and does not necessarily reflect that of State Bank group.---    =====-----=====-----===== Notice: The information contained in this e-mail message and/or attachments to it may contain  confidential or privileged information. If you are  not the intended recipient, any dissemination, use,  review, distribution, printing or copying of the  information contained in this e-mail message  and/or attachments to it are strictly prohibited. If  you have received this communication in error,  please notify us by reply e-mail or telephone and  immediately and permanently delete the message  and any attachments. Thank you 
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Transaction status outward Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Transaction status outward Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Recall transaction: Outward Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Transaction status outward Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Transaction status outward Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Transaction status outward Dear Sir, We have made a NEFT Transaction with UTR No.SBINB21333471596 dated 30/11/2013 for an amount of Rs.4,00,000/- being disbursement of a car loan. Status of the transaction is being shown in PSG site of SBI Times is Delivered to beneficiary bank (screen shot of the status attached). However the car dealer advised that amount is not credited to his account and his banker has advised that the credit was rejected due to name mismatch. The said amount is not parked in our suspense account. Please advise us where the funds are parked and advise further course of action for making payment to the car dealer. Yours faithfully, Branch Manager
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
Recall transaction: Outward Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Recall transaction: Outward Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Recall transaction: Outward Hi, I made online transaction to transfer Rs 15000 to my friend's A/C but I mistakenly transferred to wrong A/C on date 04/02/2012 with transaction reference number: 289603120.Actually I had to transfer to Bank of India A/C no.849210310000102 (Niranjan Borra).But I wrongly transferred to A/C no. 849210310000103 (Priya). UTR no: SBINP01234567891
Fraud Transaction Dear Team, The below transaction reported as FRAUD by our customer. We request you to kindly return the transaction to originator ac. Inconvenience caused is highly regretted.Transaction ref no SBIAB12345678901. We request you mark lien on the account and confirm us whether funds are available in the account or not. Kindly confirm the reversal ref no of the transaction. Thanks and regards, Branch Manager.
